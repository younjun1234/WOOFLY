<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.kh.woofly.board.model.dao.BoardDAO">

	<!-- 연준이꺼 -->
	<select id="selectMyUsedBuyingCount" resultType="_int">
		select count(*)
		from used_board
		where buyer_id = #{id}
	</select>
	
	<select id="selectMyUsedBuying" resultType="UsedBoard">
		select *
		from used_board
 		where buyer_id = #{id}
 			<if test="startDate != null">
		    	and sold_date >= #{startDate}
		    </if>
		    <if test="endDate != null">
		    	and sold_date <![CDATA[<]]> #{endDate}
		    </if>
			<if test="orderDate != null">
			    order by sold_date ${orderDate}
			</if>
			<if test="price != null">
			    order by product_price ${price}
			</if>
	</select>
	
	<select id="selectMySellingCount" resultType="_int">
		select count(*)
		from used_board
		where mb_id = #{id}
	</select>
	
	<select id="selectMySelling" resultType="UsedBoard">
		select *
		from used_board
 		where mb_id = #{id}
 			<if test="startDate != null">
		    	and sold_date >= #{startDate}
		    </if>
		    <if test="endDate != null">
		    	and sold_date <![CDATA[<]]> #{endDate}
		    </if>
	        <if test="startDate != null">
		    	or sold_date is null
		    </if>
			<if test="soldDate != null">
			    order by sold_date ${soldDate}
			</if>
			<if test="price != null">
			    order by product_price ${price}
			</if>
			<if test="uEnd != null">
			    order by u_end ${uEnd}
			</if>
	</select>
	
		 
	<!-- 자유게시판 -->	
	
	<!-- 검색 기능 -->
   <select id="searchFreeBoards" parameterType="map" resultType="Board">
       SELECT *
       FROM Board
         JOIN Member using(mb_id)
       WHERE b_status = 'Y'
       <choose>
           <when test="searchType == 'mn'">
               AND b_title LIKE '%' || #{searchKeyword} || '%' or mb_nickName LIKE '%' || #{searchKeyword} || '%'
           </when>
           <when test="searchType != null">
               AND ${searchType} LIKE '%' || #{searchKeyword} || '%'
           </when>
       </choose>
       ORDER BY b_no DESC
   </select>
	
	<select id="getListCount" resultType="_int">
		select count(*)
		from board
		where b_status = 'Y'
	</select>

	<select id="selectFreeBoardList" resultType="Board">
	    select b.*, m.mb_nickname as "mbNickName" 
	    from board b 
	    join member m on b.mb_id = m.mb_id 
	    where b.b_status = 'Y' 
	    order by b.b_no desc
	</select>


	<select id="selectAttmFreeBoardList" resultType="Attachment">
		select *
		from attachment
		where attm_status='Y'
		<if test="bId != null">
			and attm_ref_type = 'B'
			and attm_ref_no = #{ bNo }
		</if>
		order by attm_id
	</select>
	
	<select id="selectFreeBoard" resultType="board">
		select  b.*, m.mb_nickname as "mbNickName" 
		from board b
			join member m on b.mb_id = m.mb_id 
		where b.b_status = 'Y' and b.b_no = #{ bNo }
	</select>
	

	<insert id="insertFreeBoard">
	    <selectKey keyProperty="bNo" order="BEFORE" resultType="_int"> 
	        select seq_b_no.nextval as bNo from dual
	    </selectKey>
	    insert into board 
	    values (#{bNo}, #{bTitle}, default, SYSDATE, default, #{mbId}, #{bContent})
	</insert>
	
	<update id="updateFreeCount">
		update board
		set b_count = b_count +1
		where b_no = #{bNo}
	</update>

	<insert id="insertFreeAttm">
		insert all
		<foreach collection="list" item="item">
			into attachment
			values(new_aid, #{item.originalName}, #{item.renameName},
			SYSDATE, SYSDATE, #{item.attmPath}, default, 'B', #{item.attmRefNo}, #{item.attmLevel})
		</foreach>
		select * from dual
	</insert>
	
	<update id="updateFreeBoard">
		update board
		set b_title = #{bTitle}, b_content = #{bContent}
		where b_no = #{ bNo }
	</update>
	
	<update id="deleteFreeBoard">
		update board
		set b_status = 'N'
		where b_no = #{ bNo }
	</update>
	
	<delete id="deleteFreeAttm">
		delete from attachment
		<where>
			<foreach item="item" collection="list" open="rename_name in (" separator="," close=")">
				#{item}
			</foreach>
		</where>
	</delete>

	<update id="updateAttmLevel">
		update attachment
		set attm_level = 1
		where attm_id = (select min(attm_id)
						 from attachment
						 where attm_ref_no = #{bNo})
	</update>
		
	<update id="statusNAttm">
		update attachment
		set attm_status = 'N'
		where attm_ref_no = #{attmRefNo}
	</update>
	
	<insert id="insertFreeReply">
      insert into reply
      values(reply_seq.nextval, 'B', #{bNo}, 
            #{reContent}, SYSDATE, default, default, #{mbId})
   </insert>
   
   <update id="deleteFreeReply">
		update Reply
		set re_d_status = 'N'
		where r_no = #{ rNo } and b_type = 'B'
	</update>
	
	<select id="selectFreeReply" resultType="Reply">
		select  r.*, m.mb_nickname as "mbNickName" 
		from reply r
			join member m on r.mb_id = m.mb_id 
		where r.b_no = #{bNo} and r.re_d_status = 'Y' and r.b_type = 'B'
		order by r.r_no desc
	</select>
	
	
	<!--/////////// 도그워커 게시판 ////////////-->
	
	<select id="getDwListCount" resultType="_int">
		select count(*)
		from dw_board
		where dw_status = 'Y' and dw_type = '0'
	</select>

	<select id="selectDwBoardList" resultType="DwBoard">
	    select b.*, m.mb_nickname as "mbNickName" 
	    from dw_board b 
	    join member m on b.mb_id = m.mb_id 
	    where b.dw_status = 'Y' and dw_type = '0'
	    order by b.dw_no desc
	</select>


	<select id="selectAttmDwBoardList" resultType="Attachment">
		select *
		from attachment
		where attm_status='Y'
		<if test="bId != null">
			and attm_ref_type = 'DW'
			and attm_ref_no = #{ dwNo }
		</if>
		order by attm_id
	</select>
	
	<select id="getDwRvListCount" resultType="_int">
		select count(*)
		from dw_board
		where dw_status = 'Y' and dw_type = '1'
	</select>

	<select id="selectDwRvBoardList" resultType="DwBoard">
	    select b.*, m.mb_nickname as "mbNickName" 
	    from dw_board b 
	    join member m on b.mb_id = m.mb_id 
	    where b.dw_status = 'Y' and dw_type = '1'
	    order by b.dw_no desc
	</select>


	<select id="selectAttmDwRvBoardList" resultType="Attachment">
		select *
		from attachment
		where attm_status='Y'
		<if test="bId != null">
			and attm_ref_type = 'DW'
			and attm_ref_no = #{ dwNo }
		</if>
		order by attm_id
	</select>
	
	
	<select id="selectDwBoard" resultType="DwBoard">
		select  b.*, m.mb_nickname as "mbNickName" 
		from dw_board b
			join member m on b.mb_id = m.mb_id 
		where b.dw_status = 'Y' and b.dw_no = #{ dwNo }
	</select>
	
	<select id="selectDwReply" resultType="Reply">
		select  r.*, m.mb_nickname as "mbNickName" 
		from reply r
			join member m on r.mb_id = m.mb_id 
		where r.b_no = #{dwNo} and r.re_d_status = 'Y' and r.b_type = 'DW'
		order by r.r_no desc
	</select>
	
	<update id="updateDwCount">
		update dw_board
		set dw_count = dw_count +1
		where dw_no = #{dwNo}
	</update>
		
	<insert id="insertDwBoard">
	    <selectKey keyProperty="dwNo" order="BEFORE" resultType="_int"> 
	        select dw_seq.nextval as dwNo from dual
	    </selectKey>
	    insert into dw_board 
	    values (#{dwNo}, #{dwType}, #{dwTitle}, #{dwContent}, default, #{dwLocation}, SYSDATE, default, default, #{mbId}, default, #{dwPrice})
	</insert>	
	
	<insert id="insertDwAttm">
		insert all
		<foreach collection="list" item="item">
			into attachment
			values(new_aid, #{item.originalName}, #{item.renameName},
			SYSDATE, SYSDATE, #{item.attmPath}, default, 'DW', #{item.attmRefNo}, #{item.attmLevel})
		</foreach>
		select * from dual
	</insert>
	
	<update id="updateDwBoard">
		update dw_board
		set dw_title = #{dwTitle}, dw_type = #{dwType}, dw_content = #{dwContent}, dw_price=#{dwPrice}
		where dw_no = #{ dwNo }
	</update>
	
	<update id="deleteDwBoard">
		update dw_board
		set dw_status = 'N'
		where dw_no = #{ dwNo }
	</update>
	
	<insert id="insertDwReply">
      insert into reply
      values(reply_seq.nextval, #{bType}, #{bNo}, 
            #{reContent}, SYSDATE, default, default, #{mbId})
   </insert>
   
   <update id="deleteDwReply">
		update Reply
		set re_d_status = 'N'
		where r_no = #{ rNo } and b_type = 'DW'
	</update>
	
	
	<!-- 실종게시판 -->
	<select id="mListCount" resultType="_int">
		select count(*)
		from Missing_Board
		where m_status = 'Y'
	</select>

	<select id="selectLostBoardList" resultType="LostBoard">
		select *
		from Missing_Board
		join member using (mb_id)
		where m_status = 'Y' 
		order by m_no desc
	</select>

	<select id="selectAttmLostBoardList" resultType="Attachment">
		select *
		from attachment
		where attm_status='Y'
		<if test="bId != null">
			and attm_ref_type = 'B'
		</if>
		order by attm_id
	</select>
	
	<select id="selectLostBoard" parameterType="Lostboard" resultMap="LostBoardResult">
		select *
		from Missing_Board
			join member using (mb_id)
		where m_status = 'Y' and m_no = #{ mNo }
	</select>
	
	<resultMap type="LostBoard" id="LostBoardResult">
	    <result column="m_content" property="mContent" jdbcType="CLOB" javaType="java.lang.String"/>
	</resultMap>
	
	<insert id="insertLostBoard" useGeneratedKeys="true">
		<selectKey order="BEFORE" resultType="_int"	keyProperty="mNo">
			select seq_m_No.nextval from dual
		</selectKey>

		insert into Missing_Board
		values (#{mNo}, #{mTitle}, #{mContent}, default, SYSDATE, default, #{mbId}, #{mbNickName})
	</insert>
	
	<!-- 	 <select id="getListCount" resultType="_int">
		select count(*)
		from missing_board
		where m_status = 'Y' 
	</select> 

	<select id="selectBoardList" resultType="LostBoard" >
		select *
		from board
			 join member on(board_writer = id)
		where m_status = 'Y' and ATTM_REF_TYPE = #{i}
		order by board_id desc
	</select>

	selectAttmBoardList
	<select id="selectAttmBoardList" resultType="Attachment">
		select *
		from missing_board
		where m_status='Y'
		<if test="bId == null">
			and attm_level = 0
		</if>
		<if test="mNo != null">
			and m_no = #{mNo}
		</if>
		order by m_no
	</select>
	 -->
	
	
	
</mapper>
